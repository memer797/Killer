<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Card Creator</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 20px;
      background-color: #f4f4f4;
    }

    .add-button {
      background-color: #3498db;
      color: #fff;
      padding: 10px;
      border: none;
      cursor: pointer;
      border-radius: 5px;
      transition: background-color 0.3s;
    }

    .add-button:hover {
      background-color: #2980b9;
    }

    .modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      justify-content: center;
      align-items: center;
      z-index: 99;
    }

    .modal-content {
      background-color: #fff;
      padding: 20px;
      border-radius: 8px;
      width: 300px;
      text-align: center;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
    }

    .close-button {
      background-color: #e74c3c;
      color: #fff;
      padding: 5px 10px;
      border: none;
      cursor: pointer;
      position: absolute;
      top: 10px;
      right: 10px;
      border-radius: 5px;
    }

    .card {
      margin-top: 20px;
      border: 1px solid #ccc;
      border-radius: 8px;
      overflow: hidden;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      height: 150px; /* Adjust the height as needed */
      position: relative;
      cursor: pointer;
    }

    .card img {
      width: 100%;
      height: 70%;
      object-fit: cover;
    }

    .card-content {
      padding: 10px;
    }

    .tag-container {
      margin-top: 10px;
    }

    .tag {
      display: inline-block;
      background-color: #3498db;
      color: #fff;
      padding: 5px 10px;
      border-radius: 8px;
      margin-right: 5px;
      cursor: pointer;
    }

    select, input, textarea {
      width: 100%;
      margin-bottom: 10px;
      padding: 8px;
      box-sizing: border-box;
    }

    .options-menu {
      position: absolute;
      top: 10px;
      right: 10px;
      background-color: #fff;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
      border-radius: 5px;
      display: none;
    }

    .options-menu button {
      display: block;
      width: 100%;
      padding: 8px;
      text-align: left;
      border: none;
      background-color: transparent;
      cursor: pointer;
    }

    .options-menu button:hover {
      background-color: #f0f0f0;
    }

    .options-dots {
      position: absolute;
      top: 10px;
      right: 10px;
      font-size: 20px;
      cursor: pointer;
    }
  </style>
</head>
<body>

  <button class="add-button" onclick="openModal()">Add</button>

  <div id="myModal" class="modal">
    <div class="modal-content">
      <button class="close-button" onclick="closeModal()">X</button>
      <h2>Add Item</h2>
      <label for="name">Name:</label>
      <input type="text" id="name" placeholder="Enter Name">

      <label for="imageUrl">Image URL:</label>
      <input type="text" id="imageUrl" placeholder="Enter Image URL">

      <label for="description">Description:</label>
      <textarea id="description" placeholder="Enter Description"></textarea>

      <label for="category">Category:</label>
      <select id="category">
        <option value="action">Action</option>
        <option value="entertainment">Entertainment</option>
        <option value="many_more">Many More...</option>
      </select>

      <label for="tags">Tags:</label>
      <input type="text" id="tags" placeholder="Enter Tags">
      <div class="tag-container" id="tagContainer"></div>

      <button onclick="addCard()">Add</button>
    </div>
  </div>

  <div id="cardsContainer"></div>

  <script>
    let activeOptionsMenu = null;

    function openModal() {
      document.getElementById('myModal').style.display = 'flex';
    }

    function closeModal() {
      document.getElementById('myModal').style.display = 'none';
    }

    function addCard() {
      const name = document.getElementById('name').value;
      const imageUrl = document.getElementById('imageUrl').value;
      const description = document.getElementById('description').value;
      const category = document.getElementById('category').value;
      const tagsInput = document.getElementById('tags');
      const tagsContainer = document.getElementById('tagContainer');

      // Extract tags from input and split by commas
      const tags = tagsInput.value.split(',');

      const cardsContainer = document.getElementById('cardsContainer');

      const cardDiv = document.createElement('div');
      cardDiv.classList.add('card');

      const cardContent = document.createElement('div');
      cardContent.classList.add('card-content');

      const cardName = document.createElement('h3');
      cardName.innerText = name;

      const cardImage = document.createElement('img');
      cardImage.src = imageUrl;
      cardImage.alt = name;

      const cardDescription = document.createElement('p');
      cardDescription.innerText = description;

      const optionsDots = document.createElement('div');
      optionsDots.classList.add('options-dots');
      optionsDots.innerText = '...';
      optionsDots.addEventListener('click', (event) => showOptionsMenu(event, cardDiv));

      const optionsMenu = document.createElement('div');
      optionsMenu.classList.add('options-menu');
      optionsMenu.innerHTML = `
        <button onclick="viewCard()">View</button>
        <button onclick="editCard()">Edit</button>
        <button onclick="confirmDeleteCard()">Delete</button>
      `;

      cardContent.appendChild(cardName);
      cardContent.appendChild(cardImage);
      cardContent.appendChild(cardDescription);

      cardDiv.appendChild(cardContent);
      cardDiv.appendChild(optionsDots);
      cardDiv.appendChild(optionsMenu);

      cardDiv.addEventListener('click', (event) => {
        // Prevent the click event from bubbling up to the options menu
        event.stopPropagation();
        toggleOptionsMenu(cardDiv);
      });

      cardsContainer.appendChild(cardDiv);

      // Clear input fields and tags container
      tagsInput.value = '';
      tagsContainer.innerHTML = '';

      // Add tags to the tag container
      tags.forEach(tag => {
        const tagElement = document.createElement('div');
        tagElement.classList.add('tag');
        tagElement.innerText = tag;
        tagElement.addEventListener('click', () => removeTag(tagElement));
        tagsContainer.appendChild(tagElement);
      });

      closeModal(); // Close the modal after adding the card
    }

    function removeTag(tagElement) {
      const tagsContainer = document.getElementById('tagContainer');
      tagsContainer.removeChild(tagElement);
    }

    function viewCard() {
      // Implement view functionality here
      alert('Viewing card');
    }

    function editCard() {
      // Implement edit functionality here
      alert('Editing card');
    }

    function toggleOptionsMenu(card) {
      const optionsMenu = card.querySelector('.options-menu');
      if (optionsMenu.style.display === 'block') {
        optionsMenu.style.display = 'none';
      } else {
        // Close any active options menu
        if (activeOptionsMenu) {
          activeOptionsMenu.style.display = 'none';
        }
        optionsMenu.style.display = 'block';
        activeOptionsMenu = optionsMenu;
      }
    }

    function showOptionsMenu(event, card) {
      // Close any active options menu
      if (activeOptionsMenu) {
        activeOptionsMenu.style.display = 'none';
      }
      const optionsMenu = card.querySelector('.options-menu');
      optionsMenu.style.display = 'block';
      activeOptionsMenu = optionsMenu;

      // Prevent the click event from bubbling up to the card click listener
      event.stopPropagation();
    }

    function confirmDeleteCard() {
      const isConfirmed = confirm('Are you sure you want to delete this card?');
      if (isConfirmed) {
        const card = activeOptionsMenu.closest('.card');
        card.parentNode.removeChild(card);
        activeOptionsMenu.style.display = 'none';
      }
    }

    // Close options menu if you click anywhere else on the document
    document.addEventListener('click', () => {
      if (activeOptionsMenu) {
        activeOptionsMenu.style.display = 'none';
      }
    });
       document.getElementById('tags').addEventListener("input", async() => {
       	  var agsContainer = document.getElementById('tagContainer');
       
       var TInput = document.getElementById('tags');   
       if(!TInput.value.includes(",")) return;
var tgs = TInput.value.split(",");
if(!tgs || tgs.length < 1){
return; 
}
if(!tgs[0].length || tgs[0].trim() === "") return;
 const agElement = document.createElement('div');
        agElement.classList.add('tag');
        agElement.innerText = tgs[0];
        agElement.addEventListener('click', () => removeTag(agElement));
        agsContainer.appendChild(agElement);
TInput.value = "";
console.log(tgs);
       });

//get movie data
fetch("/admin/data/get/movie", {
method: "POST"
}).then(ggp => ggp.json()).then(dtta => {
dtta.data.forEach((dosta) => {
      const name = dosta;
      const imageUrl = document.getElementById('imageUrl').value;
      const description = document.getElementById('description').value;
      const category = document.getElementById('category').value;
      const tagsInput = document.getElementById('tags');
      const tagsContainer = document.getElementById('tagContainer');

      // Extract tags from input and split by commas
      const tags = tagsInput.value.split(',');

      const cardsContainer = document.getElementById('cardsContainer');

      const cardDiv = document.createElement('div');
      cardDiv.classList.add('card');

      const cardContent = document.createElement('div');
      cardContent.classList.add('card-content');

      const cardName = document.createElement('h3');
      cardName.innerText = name;

      const cardImage = document.createElement('img');
      cardImage.src = imageUrl;
      cardImage.alt = name;

      const cardDescription = document.createElement('p');
      cardDescription.innerText = description;

      const optionsDots = document.createElement('div');
      optionsDots.classList.add('options-dots');
      optionsDots.innerText = '...';
      optionsDots.addEventListener('click', (event) => showOptionsMenu(event, cardDiv));

      const optionsMenu = document.createElement('div');
      optionsMenu.classList.add('options-menu');
      optionsMenu.innerHTML = `
        <button onclick="viewCard()">View</button>
        <button onclick="editCard()">Edit</button>
        <button onclick="confirmDeleteCard()">Delete</button>
      `;

      cardContent.appendChild(cardName);
      cardContent.appendChild(cardImage);
      cardContent.appendChild(cardDescription);

      cardDiv.appendChild(cardContent);
      cardDiv.appendChild(optionsDots);
      cardDiv.appendChild(optionsMenu);

      cardDiv.addEventListener('click', (event) => {
        // Prevent the click event from bubbling up to the options menu
        event.stopPropagation();
        toggleOptionsMenu(cardDiv);
      });

      cardsContainer.appendChild(cardDiv);

      // Clear input fields and tags container
      tagsInput.value = '';
      tagsContainer.innerHTML = '';

      // Add tags to the tag container
  /*    tags.forEach(tag => {
        const tagElement = document.createElement('div');
        tagElement.classList.add('tag');
        tagElement.innerText = tag;
        tagElement.addEventListener('click', () => removeTag(tagElement));
        tagsContainer.appendChild(tagElement);
      });*/

});
}).catch();
  </script>

</body>
</html>

