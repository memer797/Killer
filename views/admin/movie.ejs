<link rel="stylesheet" type="text/css" href="/admin.movie.css" /></head>

  <button class="add-button" onclick="openModal()">Add</button>

<%- include("./panel-movie-add")%>
<%- include("./panel-movie-edit")%>
  <div id="cardsContainer"></div>

<style>
.search-container {
    position: relative;
    margin-bottom: 20px;
}

#searchInput {
    padding: 8px;
    width: 200px;
    border: 1px solid #ccc;
    border-radius: 5px;
}

button {
    padding: 8px 12px;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
}

button:hover {
    background-color: #45a049;
}

#suggestions {
    position: absolute;
    top: 100%;
    left: 0;
    width: 100%;
    background-color: #f9f9f9;
    border: 1px solid #ccc;
    border-top: none;
    border-radius: 0 0 5px 5px;
    z-index: 1;
    display: none;
}

#suggestions div {
    padding: 10px;
    border-bottom: 1px solid #ccc;
}

#suggestions div:hover {
    background-color: #f1f1f1;
}

</style>


<div class="search-container">
    <input type="text" id="searchInput" placeholder="Search movies...">
    <button onclick="searchMovies()">Search</button>
    <div id="suggestions"></div>
</div>



  <script>
  	
  function searchMovies() {
    var input, filter, cards, cardContainer, h4, p, i, txtValue;
    input = document.getElementById("searchInput");
    filter = input.value.toUpperCase();
    cardContainer = document.getElementById("cardsContainer");
    cards = cardContainer.getElementsByClassName("card-container");
    const suggestionsDiv = document.getElementById("suggestions");
    suggestionsDiv.innerHTML = "";
    for (i = 0; i < cards.length; i++) {
        h4 = cards[i].querySelector(".text-container h4");
        p = cards[i].querySelector(".text-container .pd");
        txtValue = h4.textContent || h4.innerText;
        if (txtValue.toUpperCase().indexOf(filter) > -1 || p.textContent.toUpperCase().indexOf(filter) > -1) {
            cards[i].style.display = "";
        } else {
            cards[i].style.display = "none";
            // Add matching movie names to suggestions
            const suggestion = document.createElement("div");
            suggestion.textContent = txtValue;
            suggestion.onclick = function() {
                input.value = this.textContent;
                suggestionsDiv.innerHTML = "";
                searchMovies();
            };
            suggestionsDiv.appendChild(suggestion);
        }
    }
    // Display suggestions if any
    if (filter.length > 0 && suggestionsDiv.children.length > 0) {
        suggestionsDiv.style.display = "block";
    } else {
        suggestionsDiv.style.display = "none";
    }
}


  
    let activeOptionsMenu = null;
    let ttags = [];
function truncateString(str, maxLength) {
  if (str.length > maxLength) {
    return str.substring(0, maxLength - 3) + '...';
  } else {
    return str;
  }
}
    function addCard(data){
      var { name, description, category_txt, img } = data;

    var cardContainer = document.createElement('div');
cardContainer.classList.add('card-container');

var optionsButton = document.createElement('div');
optionsButton.classList.add('options');
optionsButton.textContent = '…';
optionsButton.onclick = function(event) {
    showOptionsMenu(event, cardContainer);
};

var optionsMenu = document.createElement('div');
optionsMenu.classList.add('options-menu');
optionsMenu.id = 'optionsMenu';

/*var viewLink = document.createElement('a');
viewLink.href = '#';
viewLink.textContent = 'View';
viewLink.onclick = function() {
    viewCard(id);
};**/

var editLink = document.createElement('a');
editLink.href = '#';
editLink.textContent = 'Edit';
editLink.onclick = function() {
    editMovie(name, this);
};

var deleteLink = document.createElement('a');
deleteLink.href = '#';
deleteLink.classList.add('delete');
deleteLink.textContent = 'Delete';
deleteLink.onclick = function() {
    confirmDeleteCard(name);
};

//optionsMenu.appendChild(viewLink);
optionsMenu.appendChild(editLink);
optionsMenu.appendChild(deleteLink);

var imageContainer = document.createElement('div');
imageContainer.classList.add('image-container');

var imageElement = document.createElement('img');
imageElement.src = img;
imageElement.alt = 'Icon';

imageContainer.appendChild(imageElement);

var textContainer = document.createElement('div');
textContainer.classList.add('text-container');

var nameHeading = document.createElement('div');
nameHeading.style.width = '100%';
nameHeading.innerHTML = `<h4>${name}</h4>`;

var descriptionParagraph = document.createElement('div');
descriptionParagraph.classList.add('pd');
descriptionParagraph.textContent = description;

var category = document.createElement('div');
category.classList.add('category');
category.textContent = `${truncateString(category_txt.join(", "), 18)}`;

var customText = document.createElement('div');
customText.id = 'customText';
customText.style.position = 'absolute';
customText.style.bottom = '5px';
customText.style.left = '5px';
customText.style.color = '#555';
customText.textContent = "✅";

textContainer.appendChild(nameHeading);
textContainer.appendChild(descriptionParagraph);
textContainer.appendChild(category);
textContainer.appendChild(customText);

cardContainer.appendChild(optionsButton);
cardContainer.appendChild(optionsMenu);
cardContainer.appendChild(imageContainer);
cardContainer.appendChild(textContainer);

cardsContainer.insertBefore(cardContainer, cardsContainer.childNodes[0]);
    };
    

    function openModal() {
      document.getElementById('myModal').style.display = 'flex';
    }
    function closeModal() {
      document.getElementById('myModal').style.display = 'none';
    }


    function removeTag(tagElement) {
      const tagsContainer = document.getElementById('tagContainer');
      tagsContainer.removeChild(tagElement);
    }


    function showOptionsMenu(event, card) {
      // Close any active options menu
      if (activeOptionsMenu) {
        activeOptionsMenu.style.display = 'none';
      }
      const optionsMenu = card.querySelector('.options-menu');
      optionsMenu.style.display = 'block';
      activeOptionsMenu = optionsMenu;

      // Prevent the click event from bubbling up to the card click listener
      event.stopPropagation();
    }

    function confirmDeleteCard(name) {
      const isConfirmed = confirm('Are you sure you want to delete this card?');
      if (isConfirmed) {
        var lastPrompt = prompt(`say YES to delete`);
if(lastPrompt.trim().toLowerCase() !== "yes"){
return;
}
fetch("/admin/data/delete/movie", {
method: "POST",
headers: {
        "Content-Type": "application/json"
    },
body: JSON.stringify({
name: name
})
});
        const card = activeOptionsMenu.closest('.card-container');
        card.parentNode.removeChild(card);
        activeOptionsMenu.style.display = 'none';
      }
    }

    // Close options menu if you click anywhere else on the document
    document.addEventListener('click', () => {
      if (activeOptionsMenu) {
        activeOptionsMenu.style.display = 'none';
      }
    });
       document.getElementById('tags').addEventListener("input", async() => {
       	  var agsContainer = document.getElementById('tagContainer');
       
       var TInput = document.getElementById('tags');   
       if(!TInput.value.includes(",")) return;
var tgs = TInput.value.split(",");
if(!tgs || tgs.length < 1){
return; 
}
if(!tgs[0].length || tgs[0].trim() === "") return;
 const agElement = document.createElement('div');
        agElement.classList.add('tag');
        agElement.innerText = tgs[0];
        agElement.addEventListener('click', () => removeTag(agElement));
        agsContainer.appendChild(agElement);
TInput.value = "";
ttags.push(tgs[0]);
console.log(tgs);
       });

//get movie data
fetch("/admin/data/get/movie", {
method: "POST"
}).then(ggp => ggp.json()).then(dtta => {
dtta.data.forEach((dosta) => {
      var name = dosta.name;
      var description = dosta.description;
      var category_txt = dosta.category;
      var img = dosta.img;
addCard({
	name,
	description,
	category_txt,
	img
	});

});
}).catch();



  </script>
