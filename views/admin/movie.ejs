<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Card Creator</title>
<style>
html {
            height: 100%;
            width: 100%;
        }

        body {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: Arial, sans-serif;
            align-items: center;
            justify-content: center;
            height: 100%;
            width: 100%;
            background-color: #f2f2f2;
        }

        .card-container {
            border: 1px solid #ccc;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            width: 100%;
            height: 15%;
            display: flex;
            clear: both;
            position: relative;
        }

        .options {
            position: absolute;
            top: 5px;
            right: 5px;
            cursor: pointer;
        }

        .options-menu {
            display: none;
            position: absolute;
            top: 25px;
            right: 0;
            background-color: #fff;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            border-radius: 5px;
            z-index: 1;
        }

        .options-menu a {
            padding: 4px;
            display: block;
            text-decoration: none;
            color: #333;
            z-index: 10;
            overflow: auto;
        }

        .options-menu a:hover {
            background-color: #f2f2f2;
        }

        .options-menu a.delete {
            color: red; /* Set the color for the delete option */
        }

        .image-container {
            width: 50px;
            height: 50px;
            overflow: hidden;
            border-bottom-right-radius: 7px;
            border-top-left-radius: 7px;
            border: 1px solid #ccc;
        }

        img {
            border-top-left-radius: 6px; /* Add border-radius for the image container */
            width: 100%;
            height: 100%;
            object-fit: cover; /* Maintain aspect ratio */
        }

        .text-container {
            flex-grow: 1;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            padding: 5px;
            box-sizing: border-box;
            width: 100%;
        }

        h4, .pd, .category {
            margin: 0;
        }

        .category {
            font-style: italic;
            color: #555;
            text-align: right;
        }

        .pd {
            margin-top: -12px;
            overflow: hidden;
            text-overflow: ellipsis;
            word-wrap: break-word;
            max-height: 2.5em;
        }
#cardsContainer {
margin-top: 10px;
border: 1px solid black;
border-radius: 3px;
overflow-y: auto;
max-height: calc(100% - 70px);
}
    .tag-container {
      margin-top: 10px;
    }

    .tag {
      display: inline-block;
      background-color: #3498db;
      color: #fff;
      padding: 5px 10px;
      border-radius: 8px;
      margin-right: 5px;
      cursor: pointer;
    }

    select, input, textarea {
      width: 100%;
      margin-bottom: 10px;
      padding: 8px;
      box-sizing: border-box;
    }
    .add-button {
      background-color: #3498db;
      width: 100%;
      height: 50px;
      color: #fff;
      padding: 10px;
      border: none;
      cursor: pointer;
      border-radius: 5px;
      transition: background-color 0.3s;
    }

    .add-button:hover {
      background-color: #2980b9;
    }

    .modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      justify-content: center;
      align-items: center;
      z-index: 99;
    }

    .modal-content {
      background-color: #fff;
      padding: 20px;
      border-radius: 8px;
      width: 300px;
      text-align: center;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
    }

    .close-button {
      background-color: #e74c3c;
      color: #fff;
      padding: 5px 10px;
      border: none;
      cursor: pointer;
      position: absolute;
      top: 10px;
      right: 10px;
      border-radius: 5px;
    }
        </style>
</head>
<body>

  <button class="add-button" onclick="openModal()">Add</button>

  <div id="myModal" class="modal">
    <div class="modal-content">
      <button class="close-button" onclick="closeModal()">X</button>
      <h2>Add Item</h2>
      <label for="name">Name:</label>
      <input type="text" id="name" placeholder="Enter Name">

      <label for="imageUrl">Image URL:</label>
      <input type="text" id="imageUrl" placeholder="Enter Image URL">

      <label for="description">Description:</label>
      <textarea id="description" placeholder="Enter Description"></textarea>

      <label for="category">Category:</label>
      <select id="category">
        <option value="action">Action</option>
        <option value="entertainment">Entertainment</option>
        <option value="many_more">Many More...</option>
      </select>

      <label for="tags">Tags:</label>
      <input type="text" id="tags" placeholder="Enter Tags">
      <div class="tag-container" id="tagContainer"></div>

      <button onclick="addCard()">Add</button>
    </div>
  </div>

  <div id="cardsContainer"></div>

  <script>
    let activeOptionsMenu = null;
    let cardTemplate = `    <div class="card-container">
        <div class="options" onclick="toggleOptionsMenu(event)">...</div>
        <div class="options-menu" id="optionsMenu">
            <a href="#" onclick="viewCard()">View</a>
            <a href="#" onclick="editCard()">Edit</a>
            <a href="#" class="delete" onclick="confirmDeleteCard()">Delete</a>
        </div>
        <div class="image-container">
            <img src="https://placekitten.com/200/100" alt="Icon">
        </div>
        <div class="text-container">
            <div style="width: 100%;">
                <h4>Name</h4>
            </div>
            <div class="pd">
                Description here... (up to 2 lines) 
            </div>
            <div class="category">Category: Unknown</div>
     <div id="customText" style="position: absolute; bottom: 5px; left: 5px; color: #555;">#he5jiGj29Jd83GjekwJBIfSk</div>
      </div>
    </div>`;
    function openModal() {
      document.getElementById('myModal').style.display = 'flex';
    }
    function closeModal() {
      document.getElementById('myModal').style.display = 'none';
    }

    function addCard() {
      const name = document.getElementById('name').value;
      const imageUrl = document.getElementById('imageUrl').value;
      const description = document.getElementById('description').value;
      const category = document.getElementById('category').value;
      const tagsInput = document.getElementById('tags');
      const tagsContainer = document.getElementById('tagContainer');

      // Extract tags from input and split by commas
      const tags = tagsInput.value.split(',');

      const cardsContainer = document.getElementById('cardsContainer');

      const cardDiv = document.createElement('div');
      cardDiv.classList.add('card');

      const cardContent = document.createElement('div');
      cardContent.classList.add('card-content');

      const cardImage = document.createElement('img');
      cardImage.src = imageUrl;
      cardImage.alt = name;
   
const cardName = document.createElement('h3');
      cardName.innerText = name;

      const cardDescription = document.createElement('p');
      cardDescription.innerText = description;

      const optionsDots = document.createElement('div');
      optionsDots.classList.add('options-dots');
      optionsDots.innerText = '...';
      optionsDots.addEventListener('click', (event) => showOptionsMenu(event, cardDiv));

      const optionsMenu = document.createElement('div');
      optionsMenu.classList.add('options-menu');
      optionsMenu.innerHTML = `
        <button onclick="viewCard()">View</button>
        <button onclick="editCard()">Edit</button>
        <button onclick="confirmDeleteCard()">Delete</button>
      `;

      cardContent.appendChild(cardName);
      cardContent.appendChild(cardImage);
      cardContent.appendChild(cardDescription);

      cardDiv.appendChild(cardContent);
      cardDiv.appendChild(optionsDots);
      cardDiv.appendChild(optionsMenu);

   /*   cardDiv.addEventListener('click', (event) => {
        // Prevent the click event from bubbling up to the options menu
        event.stopPropagation();
        toggleOptionsMenu(cardDiv);
      });*/

      cardsContainer.insertBefore(cardDiv, cardsContainer.childNodes[0]);

      // Clear input fields and tags container
      tagsInput.value = '';
      tagsContainer.innerHTML = '';
if(!tags || tags.length < 1) return;
      // Add tags to the tag container
      tags.forEach(tag => {
        const tagElement = document.createElement('div');
        tagElement.classList.add('tag');
        tagElement.innerText = tag;
        tagElement.addEventListener('click', () => removeTag(tagElement));
        tagsContainer.appendChild(tagElement);
      });

      closeModal(); // Close the modal after adding the card
    }

    function removeTag(tagElement) {
      const tagsContainer = document.getElementById('tagContainer');
      tagsContainer.removeChild(tagElement);
    }

    function viewCard() {
      // Implement view functionality here
      alert('Viewing card soon :)');
    }

    function editCard() {
      // Implement edit functionality here
      alert('Editing card function soon');
    }

    function toggleOptionsMenu(card) {
      const optionsMenu = card.querySelector('.options-menu');
      if (optionsMenu.style.display === 'block') {
        optionsMenu.style.display = 'none';
      } else {
        // Close any active options menu
        if (activeOptionsMenu) {
          activeOptionsMenu.style.display = 'none';
        }
        optionsMenu.style.display = 'block';
        activeOptionsMenu = optionsMenu;
      }
    }

    function showOptionsMenu(event, card) {
      // Close any active options menu
      if (activeOptionsMenu) {
        activeOptionsMenu.style.display = 'none';
      }
      const optionsMenu = card.querySelector('.options-menu');
      optionsMenu.style.display = 'block';
      activeOptionsMenu = optionsMenu;

      // Prevent the click event from bubbling up to the card click listener
      event.stopPropagation();
    }

    function confirmDeleteCard() {
      const isConfirmed = confirm('Are you sure you want to delete this card?');
      if (isConfirmed) {
        var lastPrompt = prompt(`say YES to delete`);
if(lastPrompt.toLowerCase() !== "yes"){
return;
}
        const card = activeOptionsMenu.closest('.card');
        card.parentNode.removeChild(card);
        activeOptionsMenu.style.display = 'none';
      }
    }

    // Close options menu if you click anywhere else on the document
    document.addEventListener('click', () => {
      if (activeOptionsMenu) {
        activeOptionsMenu.style.display = 'none';
      }
    });
       document.getElementById('tags').addEventListener("input", async() => {
       	  var agsContainer = document.getElementById('tagContainer');
       
       var TInput = document.getElementById('tags');   
       if(!TInput.value.includes(",")) return;
var tgs = TInput.value.split(",");
if(!tgs || tgs.length < 1){
return; 
}
if(!tgs[0].length || tgs[0].trim() === "") return;
 const agElement = document.createElement('div');
        agElement.classList.add('tag');
        agElement.innerText = tgs[0];
        agElement.addEventListener('click', () => removeTag(agElement));
        agsContainer.appendChild(agElement);
TInput.value = "";
console.log(tgs);
       });

//get movie data
fetch("/admin/data/get/movie", {
method: "POST"
}).then(ggp => ggp.json()).then(dtta => {
dtta.data.forEach((dosta) => {
      const name = dosta;
// Create card container
var cardContainer = document.createElement('div');
cardContainer.classList.add('card-container');

// Create options button
var optionsButton = document.createElement('div');
optionsButton.classList.add('options');
optionsButton.textContent = '...';
optionsButton.onclick = function(event) {
    toggleOptionsMenu(event);
};

// Create options menu
var optionsMenu = document.createElement('div');
optionsMenu.classList.add('options-menu');
optionsMenu.id = 'optionsMenu';

// Create "View" link
var viewLink = document.createElement('a');
viewLink.href = '#';
viewLink.textContent = 'View';
viewLink.onclick = function() {
    viewCard();
};

// Create "Edit" link
var editLink = document.createElement('a');
editLink.href = '#';
editLink.textContent = 'Edit';
editLink.onclick = function() {
    editCard();
};

// Create "Delete" link
var deleteLink = document.createElement('a');
deleteLink.href = '#';
deleteLink.classList.add('delete');
deleteLink.textContent = 'Delete';
deleteLink.onclick = function() {
    confirmDeleteCard();
};

// Append links to options menu
optionsMenu.appendChild(viewLink);
optionsMenu.appendChild(editLink);
optionsMenu.appendChild(deleteLink);

// Create image container
var imageContainer = document.createElement('div');
imageContainer.classList.add('image-container');

// Create image element
var imageElement = document.createElement('img');
imageElement.src = 'https://placekitten.com/200/100';
imageElement.alt = 'Icon';

// Append image to image container
imageContainer.appendChild(imageElement);

// Create text container
var textContainer = document.createElement('div');
textContainer.classList.add('text-container');

// Create name heading
var nameHeading = document.createElement('div');
nameHeading.style.width = '100%';
nameHeading.innerHTML = `<h4>${name}</h4>`;

// Create description paragraph
var descriptionParagraph = document.createElement('div');
descriptionParagraph.classList.add('pd');
descriptionParagraph.textContent = 'Description here... (up to 2 lines)';

// Create category
var category = document.createElement('div');
category.classList.add('category');
category.textContent = 'Category: Unknown';

// Create custom text
var customText = document.createElement('div');
customText.id = 'customText';
customText.style.position = 'absolute';
customText.style.bottom = '5px';
customText.style.left = '5px';
customText.style.color = '#555';
customText.textContent = '#he5jiGj29Jd83GjekwJBIfSk';

// Append elements to text container
textContainer.appendChild(nameHeading);
textContainer.appendChild(descriptionParagraph);
textContainer.appendChild(category);
textContainer.appendChild(customText);

// Append elements to card container
cardContainer.appendChild(optionsButton);
cardContainer.appendChild(optionsMenu);
cardContainer.appendChild(imageContainer);
cardContainer.appendChild(textContainer);

// Append card container to the body or another parent element
cardsContainer.insertBefore(cardContainer.firstChild, cardsContainer.childNodes[0]);
});
}).catch();
  </script>

</body>
</html>


