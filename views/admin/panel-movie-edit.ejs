<script>
(function () { var script = document.createElement('script'); script.src="https://cdn.jsdelivr.net/npm/eruda"; document.body.append(script); script.onload = function () { eruda.init(); } })();
</script>
<div id="myEditModal" class="modal" style="overflow-y: auto;">
    <div style="overflow-y: auto;" class="modal-content">
      <button class="close-button" onclick="closeEditModal()">X</button>
      <button class="clear-button" onclick="clearEditInp()">üóëÔ∏è</button>
      <h2>Edit Movie</h2>
      <label for="edit_name">Name:</label>
      <input type="text" id="edit_name" placeholder="Enter Name">

<label for="edit_contentType">Content Type:</label>
      <select id="edit_contentType">
        <option value="Movie">Movie</option>
        <option value="Web Series">Web Series</option>
        <option value="Anime">Anime</option>
      </select>

      <label for="edit_h_type">TYPE:</label>
      <select id="edit_h_type">
        <option value="HD">HD</option>
        <option value="HQ-CAM">HQ-CAM</option>
      </select>

      <label for="edit_imageUrl">Image URL:</label>
      <input type="text" id="edit_imageUrl" placeholder="Enter Image URL">

      <label for="edit_description">Description:</label>
      <textarea id="edit_description" placeholder="Enter Description"></textarea>

      <label for="edit_category">Category:</label>
      <select id="edit_category" multiple>
        <option value="Action">Action</option>
        <option value="Adventure">Adventure</option>
        <option value="Animation">Animation</option>
        <option value="Biography">Biography</option>
        <option value="Comedy">Comedy</option>
        <option value="Crime">Crime</option>
        <option value="Documentary">Documentary</option>
        <option value="Drama">Drama</option>
        <option value="Family">Family</option>
        <option value="Fantasy">Fantasy</option>
        <option value="Historical">Historical</option>
        <option value="Horror">Horror</option>
        <option value="Musical">Musical</option>
        <option value="Mystery">Mystery</option>
        <option value="Romance">Romance</option>
        <option value="Science-Fiction">Science Fiction (Sci-Fi)</option>
        <option value="Superhero">Superhero</option>
        <option value="Thriller">Thriller</option>
        <option value="War">War</option>
        <option value="Western">Western</option>
      </select>

      <label for="edit_duration">Duration:</label>
      <input id="edit_duration" type="text" placeholder="2.5 min"/>
    
      <label for="edit_release_date">Release Date:</label>
      <input id="edit_release_date" type="date" />
    
      <label for="edit_language">Language:</label>
      <select id="edit_language" multiple> 
        <option value="Hindi">Hindi</option>
        <option value="English">English</option>
        <option value="Bengali">Bengali</option>
        <option value="Assamese">Assamese</option>
        <option value="Bodo">Bodo</option>
        <option value="Dogri">Dogri</option>
        <option value="Gujarati">Gujarati</option>
        <option value="Konkani">Konkani</option>
        <option value="Kannada">Kannada</option>
        <option value="Kashmiri">Kashmiri</option>
        <option value="Maithili">Maithili</option>
        <option value="Malayalam">Malayalam</option>
        <option value="Manipuri">Manipuri</option>
        <option value="Marathi">Marathi</option>
        <option value="Nepali">Nepali</option>
        <option value="Oriya">Oriya</option>
        <option value="Punjabi">Punjabi</option>
        <option value="Tamil">Tamil</option>
        <option value="Telugu">Telugu</option>
        <option value="Santali">Santali</option>
        <option value="Sindhi">Sindhi</option>
        <option value="Urdu">Urdu</option>
      </select>

     

      <label for="edit_starCast">Star Cast:</label>
      <input id="edit_starCast" type="text" placeholder="Rahul, Sujoy" />
    
      <button onclick="addEditDounload()"><strong>‚ûï</strong></button>
      <button onclick="removeEditDownload()"><strong>üìõ</strong></button>
      <div id="additionalEditInputs" style="max-height: calc(1.2em * 20); overflow-y: auto; margin-top: 5px; margin-bottom: 5px; border: 2px solid gray; border-radius: 4px; padding: 3px;"></div>

      <label for="edit_tags">Tags:</label>
      <input type="text" id="edit_tags" placeholder="Enter Tags and write ,">
      <div class="tag-container" id="edit-tagContainer"></div>

      <button onclick="editSave()" class="add-button" style="margin-top: 15px;">Save</button>
    </div>
</div>

<script>
let Edttags = [];
let editDownloadCount = 0;
let nowEditing_;
let lastNametoEdit;

function addEditDounload() {
    editDownloadCount++;
    const additionalEditInputs = document.getElementById('additionalEditInputs');
    additionalEditInputs.appendChild(document.createElement('br'));
    var cedittext = document.createElement('span');
    cedittext.style = "margin: 0 auto; margin-top: 10px;";
    cedittext.innerHTML = `Link ${editDownloadCount}`;
    additionalEditInputs.appendChild(cedittext);
    
    // Create input fields for download link, size, and quality  
    const editDownloadLinkInput = document.createElement('input');
    editDownloadLinkInput.type = 'text';
    editDownloadLinkInput.id = `downLink_${editDownloadCount}`;
    editDownloadLinkInput.placeholder = `Enter Download Link for link #${editDownloadCount}`;
    additionalEditInputs.appendChild(editDownloadLinkInput);

    const sizeEditInput = document.createElement('input');
    sizeEditInput.type = 'text';
    sizeEditInput.id = `size_${editDownloadCount}`;
    sizeEditInput.placeholder = `Enter Size for link #${editDownloadCount}`;
    additionalEditInputs.appendChild(sizeEditInput);

    const qualityEditInput = document.createElement('select');
    qualityEditInput.innerHTML = `
        <option value="144p">144p</option>
        <option value="360p">360p</option>
        <option value="480p">480p</option>
        <option value="720p">720p</option>
        <option value="1080p">1080p</option>
        <option value="2k">2k</option>
        <option value="4k">4k</option>
    `;
    qualityEditInput.id = `qual_${editDownloadCount}`;
    additionalEditInputs.appendChild(qualityEditInput);

    const noteEditInput = document.createElement('input');
    noteEditInput.type = 'text';
    noteEditInput.placeholder = `eg. parts (optional) for link #${editDownloadCount}`;
    noteEditInput.id = `note_${editDownloadCount}`;
    additionalEditInputs.appendChild(noteEditInput);

    additionalEditInputs.scrollTop = additionalEditInputs.scrollHeight;
}

function removeEditDownload() {
    const additionalEditInputs = document.getElementById('additionalEditInputs');
    if (editDownloadCount > 0) {
        for (let i = 0; i < 6; i++) {
            additionalEditInputs.removeChild(additionalEditInputs.lastChild);
        }
        editDownloadCount--;
    }
}

function clearEditInp() {
    var i = confirm("üóëÔ∏è Are you sure to clear all inputs?");
    if(i){
        var ii = confirm("clearing all inputs... üóëÔ∏è");
        if(ii){
            document.querySelectorAll("input[id^='edit_']").forEach(lak => lak.value = "");
            document.querySelectorAll("textarea[id^='edit_']").forEach(lak => lak.value = "");
        }
    }
}

//edit card function
var ecardsContainer = document.querySelector("#cardsContainer");
function editCard(data){
    var { name, description, category_txt, img } = data;
    try {
        var cardContainer = nowEditing_.parentNode.parentNode;
        cardContainer.innerHTML = "";
        cardContainer.classList.add('card-container');

        var optionsButton = document.createElement('div');
        optionsButton.classList.add('options');
        optionsButton.textContent = '‚Ä¶';
        optionsButton.onclick = function(event) {
            showOptionsMenu(event, cardContainer);
        };

        var optionsMenu = document.createElement('div');
        optionsMenu.classList.add('options-menu');
        optionsMenu.id = 'optionsMenu';

        var editButton = document.createElement('button');
        editButton.textContent = 'Edit';
        editButton.onclick = function() {
            openEditModal(cardContainer);
        };

        var deleteButton = document.createElement('button');
        deleteButton.textContent = 'Delete';
        deleteButton.onclick = function() {
            confirmDeleteCard(cardContainer);
        };

        optionsMenu.appendChild(editButton);
        optionsMenu.appendChild(deleteButton);

        var categoryList = document.createElement('ul');
        categoryList.classList.add('category');
        category_txt.forEach(cat => {
            var categoryItem = document.createElement('li');
            categoryItem.textContent = cat;
            categoryList.appendChild(categoryItem);
        });

        var imageElement = document.createElement('img');
        imageElement.classList.add('card-img');
        imageElement.src = img;

        var titleElement = document.createElement('h3');
        titleElement.classList.add('card-title');
        titleElement.textContent = name;

        var descriptionElement = document.createElement('p');
        descriptionElement.classList.add('card-description');
        descriptionElement.textContent = description;

        cardContainer.appendChild(optionsButton);
        cardContainer.appendChild(optionsMenu);
        cardContainer.appendChild(categoryList);
        cardContainer.appendChild(imageElement);
        cardContainer.appendChild(titleElement);
        cardContainer.appendChild(descriptionElement);

        ecardsContainer.appendChild(cardContainer);
    } catch (error) {
        console.error('Error updating the card:', error);
    }
}

//get val by id function
function getValById(id) {
    var element = document.getElementById(id);
    if (element) {
        return element.value;
    }
    return null;
}

// function to get all the values of a select element with multiple selection
function getSelectValues(selectElement) {
    const selectedOptions = Array.from(selectElement.options)
        .filter(option => option.selected)
        .map(option => option.value);
    return selectedOptions;
}

function getCheckValues(containerId) {
    var container = document.getElementById(containerId);
    var checkboxes = container.querySelectorAll('input[type="checkbox"]:checked');
    var values = [];
    checkboxes.forEach(function(checkbox) {
        values.push(checkbox.value);
    });
    return values;
}

function editSave(){
    var name = getValById('edit_name');
    var description = getValById('edit_description');
    var img = getValById('edit_imageUrl');
    var editType = getValById('edit_h_type');

    var categories = getSelectValues(document.getElementById('edit_category'));
    var language = getSelectValues(document.getElementById('edit_language'));
    var duration = getValById('edit_duration');
    var release_date = getValById('edit_release_date');
    var star_cast = getValById('edit_starCast');
    var contentType = getValById('edit_contentType');
    var downloadLinks = getDownloadLinks(editDownloadCount, 'downLink_');
    var downloadSizes = getDownloadLinks(editDownloadCount, 'size_');
    var downloadQualities = getDownloadLinks(editDownloadCount, 'qual_');
    var downloadNotes = getDownloadLinks(editDownloadCount, 'note_');
    var tags = Edttags; 

    const data = {
        name: name,
        description: description,
        category_txt: categories,
        img: img,
        language: language,
        duration: duration,
        release_date: release_date,
        star_cast: star_cast,
        contentType: contentType,
        download_links: downloadLinks,
        download_sizes: downloadSizes,
        download_qualities: downloadQualities,
        download_notes: downloadNotes,
        tags: tags,
        type: editType
    };

    if (name === lastNametoEdit) {
        alert("Make sure to change Name while editing!");
        return;
    }
    if (localStorage.getItem(name) !== null) {
        alert("A movie with this name already exists!");
        return;
    }

    localStorage.setItem(name, JSON.stringify(data));
    localStorage.removeItem(lastNametoEdit);
    editCard(data);
    closeEditModal();
}

function getDownloadLinks(count, prefix) {
    var links = [];
    for (var i = 1; i <= count; i++) {
        links.push(getValById(prefix + i));
    }
    return links;
}

function getSelectValues(selectElement) {
    const selectedOptions = Array.from(selectElement.options)
        .filter(option => option.selected)
        .map(option => option.value);
    return selectedOptions;
}

function openEditModal(cardContainer) {
    nowEditing_ = cardContainer.querySelector('.options');
    var name = cardContainer.querySelector('.card-title').textContent;
    var data = JSON.parse(localStorage.getItem(name));
    lastNametoEdit = name;
    document.getElementById('edit_name').value = name;
    document.getElementById('edit_description').value = data.description;
    document.getElementById('edit_imageUrl').value = data.img;
    document.getElementById('edit_h_type').value = data.type;

    setSelectValues('edit_category', data.category_txt);
    setSelectValues('edit_language', data.language);
    document.getElementById('edit_duration').value = data.duration;
    document.getElementById('edit_release_date').value = data.release_date;
    document.getElementById('edit_starCast').value = data.star_cast;
    document.getElementById('edit_contentType').value = data.contentType;

    // Handle the download links
    editDownloadCount = 0; 
    const additionalEditInputs = document.getElementById('additionalEditInputs');
    additionalEditInputs.innerHTML = '';
    for (let i = 0; i < data.download_links.length; i++) {
        addEditDounload();
        document.getElementById(`downLink_${editDownloadCount}`).value = data.download_links[i];
        document.getElementById(`size_${editDownloadCount}`).value = data.download_sizes[i];
        document.getElementById(`qual_${editDownloadCount}`).value = data.download_qualities[i];
        document.getElementById(`note_${editDownloadCount}`).value = data.download_notes[i];
    }

    Edttags = data.tags || [];
    document.getElementById('edit_tags').value = Edttags.join(', ');
    const tagContainer = document.getElementById('edit-tagContainer');
    tagContainer.innerHTML = '';
    Edttags.forEach(tag => {
        const tagElement = document.createElement('div');
        tagElement.classList.add('tag');
        tagElement.textContent = tag;
        tagContainer.appendChild(tagElement);
    });

    document.getElementById('myEditModal').style.display = 'block';
}

function setSelectValues(selectId, values) {
    const selectElement = document.getElementById(selectId);
    if (selectElement) {
        for (const option of selectElement.options) {
            option.selected = values.includes(option.value);
        }
    }
}

function closeEditModal() {
    document.getElementById('myEditModal').style.display = 'none';
    Edttags = [];
}

document.getElementById('edit_tags').addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
        e.preventDefault();
        const input = e.target.value.trim();
        if (input !== '') {
            Edttags.push(input);
            const tagContainer = document.getElementById('edit-tagContainer');
            const tagElement = document.createElement('div');
            tagElement.classList.add('tag');
            tagElement.textContent = input;
            tagContainer.appendChild(tagElement);
            e.target.value = '';
        }
    }
});
</script>
